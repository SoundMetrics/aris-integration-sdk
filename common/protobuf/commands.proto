syntax = "proto3";

package aris;

message Command {
  CommandType type = 1;

  enum CommandType {
    SET_DATETIME = 0;
    SET_FRAMESTREAM_RECEIVER = 1;
    SET_FRAMESTREAM_SETTINGS = 2;
    SET_ACOUSTICS = 3;
    SET_SALINITY = 4;
    SET_TELEPHOTO = 5;
    SET_FOCUS = 6;
    FORCE_FOCUS = 7;
    HOME_FOCUS = 8;
    SET_ROTATOR_MOUNT = 9;
    SET_ROTATOR_VELOCITY = 10;
    SET_ROTATOR_ACCELERATION = 11;
    SET_ROTATOR_POSITION = 12;
    STOP_ROTATOR = 13;
    PING = 14;
    SET_SYSLOG_RECEIVER = 15;
    POWER_DOWN = 16;  // For internal use by Sound Metrics only
    RESERVED_1 = 17;  // For internal use by Sound Metrics only
  }

  SetDateTime dateTime = 2;
  SetFrameStreamReceiver frameStreamReceiver = 3;
  SetFrameStreamSettings frameStreamSettings = 4;
  SetAcousticSettings settings = 5;
  SetSalinity salinity = 6;
  SetTelephotoLens telephoto = 7;
  SetFocusPosition focusPosition = 8;
  ForceFocus focusForce = 9;
  HomeFocus focusHome = 10;
  SetRotatorMount mount = 11;
  SetRotatorVelocity rotatorVelocity = 12;
  SetRotatorAcceleration rotatorAcceleration = 13;
  SetRotatorPosition rotatorPosition = 14;
  StopRotator rotatorStop = 15;
  Ping ping = 16;
  SetSyslogReceiver syslogReceiver = 17;
  PowerDown powerDown = 18;
  Reserved1 reserved1 = 19;

  message SetDateTime {
    string dateTime = 1; 
  }

  // Sets the address and port of the target machine to which frames are sent.
  // This is always set immediately upon connecting to ARIS and can change over
  // the course of a session in a tethered diver-held environment.
  // Sending an IP address of 0.0.0.0 closes down the network frame stream.
  message SetFrameStreamReceiver {
    uint32 port = 1;
    string ip = 2;
  }

  message SetFrameStreamSettings {
    enum PacketLossMitigation {
      DROP_PARTIAL_FRAMES = 0;    // Any missing packet causes the frame to be lost. Easy, fast,
                                  // lossy in noisy environments.

      PESSIMISTIC_RETRY = 1;  // Waits for ACK before continuing to the next packet; retries
                              // missing packets until connection terminates; drops oldest frames
                              // from outgoing queue (but not the one in progress).
    }

    SetInterpacketDelay interpacketDelay = 1;
    PacketLossMitigation packetLossMitigation = 2; // Not currently supported.
  }

  message SetInterpacketDelay {
    bool enable = 1;

    // The delay is specified in microseconds.
    uint32 delayPeriod = 2;
  }

  message SetAcousticSettings {
    enum Frequency {
      LOW = 0;
      HIGH = 1;
    }

    uint32 cookie = 1;
    float frameRate = 2;
    uint32 samplesPerBeam = 3;
    uint32 sampleStartDelay = 4;
    uint32 cyclePeriod = 5;
    uint32 samplePeriod = 6;
    uint32 pulseWidth = 7;
    uint32 pingMode = 8;
    bool enableTransmit = 9;
    Frequency frequency = 10;
    bool enable150Volts = 11;
    float receiverGain = 12;
  }

  message SetSalinity {
    enum Salinity {
      FRESH = 0;
      BRACKISH = 15;
      SALTWATER = 35;
    }

    Salinity salinity = 1;
  }

  message SetTelephotoLens {
    bool telephoto = 1;
  }

  message SetFocusPosition {
    uint32 position = 1;   // obsolete; ARIScope will continue to use this in support of pre-2.6 firmware.
    float  focusRange = 2; // in meters; this is the prefered method for firmware 2.6 and later.
  }  

  message ForceFocus {
    enum Direction {
      INVALID = 0; // proto3 forces this.
      FORWARD = 1;
      REVERSE = 2;
    }

    Direction direction = 1;
  }

  message HomeFocus {}

  message SetRotatorMount {
    enum Mount {
      POLE = 0;
      TRIPOD = 1;
      ROV = 2;
    }

    Mount mount = 1;
  }

  enum Axis {
    PAN = 0;
    ROLL = 1;
    TILT = 2;
  }

  message SetRotatorVelocity {
    Axis axis = 1;
    float velocity = 2;
  }

  message SetRotatorAcceleration {
    Axis axis = 1;
    float acceleration = 2;
  }

  message SetRotatorPosition {
    Axis axis = 1;
    float position = 2;
  }

  message StopRotator {
    Axis axis = 1;
  }

  message Ping {
  }

  message SetSyslogReceiver {
    string ip = 1;
  }

  // For internal use by Sound Metrics only
  message PowerDown {
  }

  // For internal use by Sound Metrics only
  message Reserved1 {
  }
}
