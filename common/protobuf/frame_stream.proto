package frame_stream;

enum SonarModel {
  ARIS1800 = 0;
  ARIS3000 = 1;
  ARIS1200 = 2;
}

// One or more FramePart messages are sent per frame. The first FramePart for a
// frame will have 'header' set to the (partial) raw frame header data and will
// have a 'data_offset' of zero. Subsequent FramePart messages for the same
// frame will not set 'header'. All messages will set 'data' and 'data_offset',
// advancing 'data_offset' for each successive part.
//
// INTERNAL NOTE: If this message changes, the overhead needs to be recalculated
// (see SAFE_PROTOBUF_FRAMEPART_OVERHEAD) and code adjusted to use the new
// overhead figure.
//
message FramePart {
  // 1-based frame index
  optional int32 frame_index = 1;

  // The size of the frame data (beams * samples); all other frame metadata is
  // contained in 'header'. 'total_data_size' is given here for ease of
  // allocation and assembly of the frame parts.
  optional int32 total_data_size = 2;

  // The raw frame header (only set in the first FramePart of a frame); only the
  // bytes in use are sent, it is not padded to 1024.
  optional bytes header = 3;

  // Raw frame data
  optional bytes data = 4;

  // Offset into the entire frame data at which this 'data' is found
  optional int32 data_offset = 5;

  // ARIS UDP port to which the FramePartAck should be sent.
  optional int32 ack_port = 6;
}

message FramePartAck {
  // Required.
  optional int32 frame_index = 1;

  // Offset of next expected part. For a frame with 'total_data_size' of N, the
  // last FramePartAck will have 'data_offset' containing N. Required.
  optional int32 data_offset = 2;
}
