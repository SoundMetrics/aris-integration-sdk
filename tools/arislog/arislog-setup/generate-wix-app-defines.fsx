// This script generates an include file for our application setup programs.
// The include file defines variables to be used within the setup program,
// such as application version.

open System
open System.Diagnostics
open System.IO

let programName = "generate-wix-app-defines.fsx"
let usage = sprintf @"fsi %s -- <version-file> <output-output>" programName
let defaultBuildNumber = 55555us  // larges single-character decimal number that fits in 16 bits

type Result<'T, 'E> =
| Okay of 'T
| Error of 'E

type Arguments = { inputFile : string; outputFile : string }

let getBaseVersion args = File.ReadAllText(args.inputFile)

let getBuildNumber () =
    let numString = Environment.GetEnvironmentVariable("BUILD_NUMBER")
    if String.IsNullOrWhiteSpace(numString) then
        string defaultBuildNumber
    else
        numString

let getFullVersion args =

    let ver = getBaseVersion args
    let build = getBuildNumber ()
    ver + "." + build

let generateIncludeContents version =
    sprintf @"
<!-- This file is generated by %s -->
<Include>
   <?define APPS_VERSION='%s'?>
</Include>
"
        programName version

//--------------------------------------------------
// main program

// Get only the args after the first "--"
let getProgramArgs args =

    let rec findDelim argList =
        match argList with
        | "--" :: rem ->    rem |> List.toArray
        | _ :: rem ->       findDelim rem
        | [] ->             Array.empty

    findDelim (args |> Array.toList)


// Get the input and output file names from arguments.
let parseArgs () =
    // Get only the args that apply to the program.
    let args = getProgramArgs fsi.CommandLineArgs

    match args with
    | [| inputFile; outputFile |] -> Okay { inputFile = inputFile; outputFile = outputFile }
    | [||] ->       Error "No arguments"
    | [| _ |] ->    Error "Too few arguments"
    | _ ->          Error "Too many arguments"

match parseArgs() with
| Error msg ->  eprintfn "ERROR: %s" msg
                eprintfn "USAGE: %s" usage
                exit 1
| Okay args ->
    let includeContents = generateIncludeContents (getFullVersion args)
    File.WriteAllText(args.outputFile, includeContents)
    printfn ""
    printfn "Success. Wrote file '%s'" args.outputFile
    printfn "--------"
    printfn "%s" includeContents
    printfn "--------"
